
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, 
    MessageHandler, filters, CallbackContext, 
    ConversationHandler
)
from telegram import Update, ReplyKeyboardMarkup
from dotenv import load_dotenv
from loguru import logger
import requests
import sys
import os


# --- –ù–∞—Å—Ç—Ä–æ–∏–∫–∏ –ª–æ–≥–æ–≤ ---
logger.remove()
logger.add(sys.stdout, format="<level>{message}</level>")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


N = 12  # 12 —Ü–µ–Ω –∑–∞ —á–∞—Å (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
PRICE_CHECK_INTERVAL = int(3600/N)  # 5 –º–∏–Ω—É—Ç
REPORT_INTERVAL = 60 * 60 * 2  # 2 —á–∞—Å–∞
BUTTON_REPORT_LABEL = "–û—Ç—á—ë—Ç"
BUTTON_ADD_TOKEN_LABEL = "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω"
BUTTON_CANCEL_LABEL = "–û—Ç–º–µ–Ω–∞"
PERCENT = 1.03


class Token:
    def __init__(self, name: str, address: str, chain: str) -> None:
        self.name = name
        self.address: str = address
        self.chain: str = chain

        self.prices: list[float] = []
        self.caps: list[float] = []
        self.last_report_price: float = None # type: ignore
        self.last_report_cap: float = None # type: ignore

        price, cap = self.fetch_token_data()
        if price and cap:
            for _ in range(N):
                self.prices.append(price)
                self.caps.append(cap)
            self.last_report_cap = cap
            self.last_report_price = price
    
    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ ---
    def fetch_token_data(self) -> tuple[float, float] | tuple[None, None]:
        try:
            resp = requests.get(get_api_url(self), timeout=10)
            data = resp.json()
            # Dexscreener –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é
            pair = data["pairs"][0]
            price = float(pair["priceUsd"])
            cap = float(pair.get("fdv", 0))  # fully diluted valuation
            return price, round(cap / 1_000_000, 3)
        except Exception as e:
            return None, None
    
    def get_price_change_percent(self, price: float):
        return ((price - self.last_report_price) / self.last_report_price) * 100
    
    # --- –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
    def get_avg_price(self):
        return sum(self.prices) / len(self.prices)

# --- –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class User:
    def __init__(self, chat_id: int) -> None:
        self.chat_id = chat_id
        self.tokens_for_tracking: set[Token] = set()
    
    def add_token(self, token: Token) -> None:
        self.tokens_for_tracking.add(token)

def get_api_url(token: Token) -> str:
    return f"https://api.dexscreener.com/latest/dex/pairs/{token.chain}/{token.address}"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
users: list[User] = []
# –°–æ—Å—Ç–æ—è–Ω–∏—è
GETTING_ADDRESS, GETTING_CHAIN, GETTING_NAME = range(3)

def add_user(new_user: User) -> bool:
    global users

    for user in users:
        if new_user.chat_id == user.chat_id:
            break
    else:
        users.append(new_user)
        return True

    return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    return ReplyKeyboardMarkup([[BUTTON_CANCEL_LABEL]], resize_keyboard=True)

def get_main_keyboard():
    keyboard_label = [[BUTTON_REPORT_LABEL, BUTTON_ADD_TOKEN_LABEL]]
    return ReplyKeyboardMarkup(keyboard_label, resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    
    chat_id = update.effective_chat.id
    
    if (add_user(User(chat_id))):
        msg = "–ü—Ä–∏–≤–µ—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!"
    else:
        msg = "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!"

    
    await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=get_main_keyboard(), parse_mode="HTML")

# --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É ---
def format_price(price: float) -> str:
    str_price = str(price)
    _, frac_part = str_price.split('.')
    # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –≤ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã
    leading_zeros_len = len(frac_part) - len(frac_part.lstrip('0'))
    return f"0.{"0"*leading_zeros_len}<b>{frac_part.lstrip('0')}</b>"

# --- –†–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Ç—á—ë—Ç ---
async def send_report(context: CallbackContext):
    logger.info("üïì –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞")

    for user in users:
        msg = ""
        for token in user.tokens_for_tracking:
            price, cap = token.fetch_token_data()
            msg += f"<b>{token.name}</b>:\n"
            if price is None or cap is None:
                msg += (
                    "\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"
                )
            elif token.last_report_price is None:
                msg += (
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ"
                )
            else:
                price_change_percent = token.get_price_change_percent(price)                
                icon = "üü¢" if price_change_percent > 0 else "üî¥" if price_change_percent < 0 else ""
                msg += (
                    f"–û—Ç—á—ë—Ç {icon} {price_change_percent:.2f}%\n"
                    f"üí∏: ${format_price(price)}\n"
                    f"üí∞: ${cap}\n"
                    "\n"
                )

                token.last_report_cap = cap
                token.last_report_price = price

        if msg == "":
            msg = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–ª–µ–∂–∫–∏"
        await context.bot.send_message(chat_id=user.chat_id, text=msg, parse_mode="HTML")  

def get_user_by_chat_id(chat_id: int):
    for user in users:
        if user.chat_id == chat_id:
            return user

# --- –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ ---
async def check_and_notify(context: CallbackContext):
    for user in users:
        for token in user.tokens_for_tracking:
            price, cap = token.fetch_token_data()
            if price and cap:
                logger.info("üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")        
                avg_price = token.get_avg_price()
                token.prices.append(price)
                token.prices.pop(0)
                token.caps.append(cap)
                token.caps.pop(0)
                if price > avg_price * PERCENT:
                    logger.info("üíπ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å—á–∞—Å—Ç—å—è")
                    price_change_percent = ((price - avg_price) / avg_price) * 100
                    msg = (
                        f"üü¢üü¢üü¢üü¢üü¢üü¢\n",
                        f"–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ <b>{price_change_percent}%<b> –∑–∞ —á–∞—Å!\n"
                        f"üí∏: ${format_price(price)}\n"
                        f"üí∞: ${cap}\n"
                    )

                    await context.bot.send_message(chat_id=user.chat_id, text=msg, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text # type: ignore
    if text == BUTTON_REPORT_LABEL:
        logger.info("üîΩ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        await send_report(context)
    if text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

async def start_getting_token(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BUTTON_CANCEL_LABEL: # type: ignore
        return await cancel(update, context)
        

    await context.bot.send_message(
        chat_id=update.effective_chat.id, # type: ignore
        text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:",
        reply_markup=get_cancel_keyboard()
    )

    return GETTING_ADDRESS

async def getting_address(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    if update.message.text == BUTTON_CANCEL_LABEL: # type: ignore
        return await cancel(update, context)
       
    context.user_data['token_address'] = update.message.text # type: ignore

    await context.bot.send_message(
        chat_id=update.effective_chat.id, # type: ignore
        text="–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ç—å —Ç–æ–∫–µ–Ω–∞ (bsc, solana...):",
        reply_markup=get_cancel_keyboard()
    )

    return GETTING_CHAIN

async def getting_chain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BUTTON_CANCEL_LABEL: # type: ignore
        return await cancel(update, context)
        
    
    context.user_data['token_chain'] = update.message.text # type: ignore

    await context.bot.send_message(
        chat_id=update.effective_chat.id, # type: ignore
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:",
        reply_markup=get_cancel_keyboard()
    )

    return GETTING_NAME

async def getting_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BUTTON_CANCEL_LABEL: # type: ignore
        return await cancel(update, context)
    
    context.user_data['token_name'] = update.message.text # type: ignore

    user: User = get_user_by_chat_id(update.effective_chat.id) # type: ignore
    user.add_token(Token(
        context.user_data['token_name'], # type: ignore
        context.user_data['token_address'], # type: ignore
        context.user_data['token_chain'], # type: ignore
    ))

    await context.bot.send_message(
        chat_id=user.chat_id, # type: ignore
        text="–¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=get_main_keyboard()
    )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û—Ç–º–µ–Ω–∞")

    await context.bot.send_message(
        chat_id=update.effective_chat.id, # type: ignore
        text="–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω",
        reply_markup=get_main_keyboard()
    )

    return ConversationHandler.END


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    logger.info("‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ —Ä–æ–±–æ—Ç—ã")
    if TELEGRAM_TOKEN is None:
        logger.info("‚ö†Ô∏è –ù–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")
        return
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
   
    if app.job_queue is None:
        logger.info(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")    
        return
    
    app.job_queue.run_repeating(send_report, REPORT_INTERVAL)
    app.job_queue.run_repeating(check_and_notify, PRICE_CHECK_INTERVAL)

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(f'^{BUTTON_ADD_TOKEN_LABEL}$'), start_getting_token)
        ],
        states={
            GETTING_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, getting_address)
            ],
            GETTING_CHAIN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, getting_chain)
            ],
            GETTING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, getting_name)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)]
    )

    app.add_handler(conv_handler)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()

