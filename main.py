
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ReplyKeyboardMarkup
from dotenv import load_dotenv
from loguru import logger
import requests
import sys
import os


# --- –ù–∞—Å—Ç—Ä–æ–∏–∫–∏ –ª–æ–≥–æ–≤ ---
logger.remove()
logger.add(sys.stdout, format="<level>{message}</level>")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

TOKEN_ADDRESS = "0x597d9816Ddb9624824591360180A70BE6fD26182"
CHAIN = "bsc"
PAIR_API_URL = f"https://api.dexscreener.com/latest/dex/pairs/{CHAIN}/{TOKEN_ADDRESS}"
N = 12  # 12 —Ü–µ–Ω –∑–∞ —á–∞—Å (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
PRICE_CHECK_INTERVAL = int(3600/N)  # 5 –º–∏–Ω—É—Ç
REPORT_INTERVAL = 10  # 2 —á–∞—Å–∞
BUTTON_LABEL = "–û—Ç—á—ë—Ç"
PERCENT = 1.03


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
prices = []
caps = []
subscribers = set()
last_report_price = 1
last_report_cap = 1


# --- –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞ ---
def update_last_report_date():
    global last_report_price, last_report_cap
    new_report_price, new_report_cap = fetch_token_data()
    if new_report_cap:
        last_report_price = new_report_price
        last_report_cap = new_report_cap

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ ---
def fetch_token_data() -> tuple[float, float] | tuple[None, None]:
    try:
        resp = requests.get(PAIR_API_URL, timeout=10)
        data = resp.json()
        # Dexscreener –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é
        pair = data["pairs"][0]
        price = float(pair["priceUsd"])
        cap = float(pair.get("fdv", 0))  # fully diluted valuation
        return price, round(cap / 1_000_000, 3)
    except Exception as e:
        return None, None

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat is None:
        return
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    price, cap = fetch_token_data()
    if price:
        msg = (
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–º–∫–æ–∏–Ω–∞\n"
            f"üí∏: ${format_price(price)}\n"
            f"üí∞: ${cap}\n"
        )
    else:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    keyboard_label = [[BUTTON_LABEL]]
    reply_markup = ReplyKeyboardMarkup(keyboard_label, resize_keyboard=True)
    await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=reply_markup, parse_mode="HTML")

# --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É ---
def format_price(price: float) -> str:
    str_price = str(price)
    _, frac_part = str_price.split('.')
    # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏ –≤ –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã
    leading_zeros_len = len(frac_part) - len(frac_part.lstrip('0'))
    return f"0.{"0"*leading_zeros_len}<b>{frac_part.lstrip('0')}</b>"

# --- –†–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Ç—á—ë—Ç ---
async def send_report(context: CallbackContext):
    logger.info("üïì –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞")
    global last_report_price, last_report_cap
    price, cap = fetch_token_data()
    if price is None:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞"
    elif last_report_price is None:
        msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞"
    else:
        price_change_percent = ((price - last_report_price) / last_report_price) * 100
        icon = "üü¢" if price_change_percent > 0 else "üî¥" if price_change_percent < 0 else ""
        msg = (
            f"–û—Ç—á—ë—Ç {icon} {price_change_percent:.2f}%\n"
            f"üí∏: ${format_price(price)}\n"
            f"üí∞: ${cap}\n"
        )
        last_report_cap = cap
        last_report_price = price
    
    for chat_id in subscribers:
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")  
    
    update_last_report_date()

# --- –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
def get_avg_price():
    return sum(prices) / len(prices)

# --- –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ ---
async def check_and_notify(context: CallbackContext):
    price, cap = fetch_token_data()
    if price:
        logger.info("üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        avg_price = get_avg_price()
        prices.append(price)
        caps.append(cap)
        prices.pop(0)
        caps.pop(0)
        if price > avg_price * PERCENT:
            logger.info("üíπ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å—á–∞—Å—Ç—å—è")
            price_change_percent = ((price - avg_price) / avg_price) * 100
            msg = (
                f"üü¢üü¢üü¢üü¢üü¢üü¢\n",
                f"–¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ <b>{price_change_percent}%<b> –∑–∞ —á–∞—Å!\n"
                f"üí∏: ${format_price(price)}\n"
                f"üí∞: ${cap}\n"
            )
            for chat_id in subscribers:
                await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text # type: ignore
    if text == BUTTON_LABEL:
        logger.info("üîΩ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        await send_report(context)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    logger.info("‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ —Ä–æ–±–æ—Ç—ã")
    if TELEGRAM_TOKEN is None:
        logger.info("‚ö†Ô∏è –ù–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")
        return
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—á—ë—Ç–∞
    update_last_report_date()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    price, cap = fetch_token_data()
    if price:
        for _ in range(N):
            prices.append(price)
            caps.append(cap)

    if app.job_queue is None:
        logger.info(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")    
        return
    
    app.job_queue.run_repeating(send_report, REPORT_INTERVAL)
    app.job_queue.run_repeating(check_and_notify, PRICE_CHECK_INTERVAL)

    app.run_polling()


if __name__ == "__main__":
    main()

